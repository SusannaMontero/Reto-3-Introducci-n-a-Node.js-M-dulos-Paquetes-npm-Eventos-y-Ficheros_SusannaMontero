"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.hydrate = hydrate;

var _react = _interopRequireWildcard(require("react"));

var _reactDom = require("react-dom");

var _reactRedux = require("react-redux");

var _reactRouterDom = require("react-router-dom");

var _reactRouterConfig = require("react-router-config");

var _loadRouteComponents = _interopRequireDefault(require("./loadRouteComponents"));

var _HandleRouteChange = _interopRequireDefault(require("./HandleRouteChange"));

var _LaterContext = _interopRequireWildcard(require("./LaterContext"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

/**
 * Hydrates the React application on the client.
 *
 * @param  {Object}   options               Hydration options.
 * @param  {Function} options.createStore   Function that returns a redux store.
 * @param  {Array}    options.routes        react-router-config routes
 *                                          configuration.
 * @param  {Function} options.resolveRoute  Function that resolves a route's
 *                                          loadData property.
 * @param  {Function} options.hydrateMethod Hydration method. children passed 
 *                                          here to provide the ability to wrap
 *                                          the application. 
 */
function hydrate(_ref) {
  var createStore = _ref.createStore,
      routes = _ref.routes,
      resolveRoute = _ref.resolveRoute,
      hydrateMethod = _ref.hydrateMethod;
  var preloadedState = JSON.parse(document.getElementById('preloaded-state').textContent);
  var store = createStore(preloadedState);
  var storeResolve = resolveRoute.bind(this, store); // Allows for links to be created that access route resolution.

  var LaterContextProvider = (0, _LaterContext.createLaterProvider)(routes, storeResolve);
  (0, _loadRouteComponents.default)(routes, window.location.pathname).then(function () {
    hydrateMethod = hydrateMethod || _reactDom.hydrate;
    hydrateMethod(_react.default.createElement(LaterContextProvider, null, _react.default.createElement(_LaterContext.default.Consumer, null, function (LaterContext) {
      return _react.default.createElement(_reactRedux.Provider, {
        store: store
      }, _react.default.createElement(_reactRouterDom.BrowserRouter, null, _react.default.createElement(_HandleRouteChange.default, LaterContext, (0, _reactRouterConfig.renderRoutes)(routes))));
    })), document.getElementById('root'));
  });
}

;