"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.asyncComponent = asyncComponent;

var _react = _interopRequireDefault(require("react"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } _setPrototypeOf(subClass.prototype, superClass && superClass.prototype); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.getPrototypeOf || function _getPrototypeOf(o) { return o.__proto__; }; return _getPrototypeOf(o); }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

/**
 * Creates an async React component that will be loaded on route change.
 *
 * @param  {Function} loader Function that returns a dynamic import of a
 *                           component.
 * @return {Component}       Component that will render the dynamic import on
 *                           load.
 */
function asyncComponent(loader) {
  var Component = null;

  var AsyncRouteComponent =
  /*#__PURE__*/
  function (_React$Component) {
    _createClass(AsyncRouteComponent, null, [{
      key: "load",
      value: function load() {
        return loader().then(function (ResolvedComponent) {
          Component = ResolvedComponent.default || ResolvedComponent;
        });
      }
    }]);

    function AsyncRouteComponent(props) {
      var _this;

      _classCallCheck(this, AsyncRouteComponent);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(AsyncRouteComponent).call(this, props));
      _this.state = {
        Component: Component
      };
      _this.updateState = _this.updateState.bind(_assertThisInitialized(_assertThisInitialized(_this)));
      return _this;
    }

    _createClass(AsyncRouteComponent, [{
      key: "componentWillMount",
      value: function componentWillMount() {
        AsyncRouteComponent.load().then(this.updateState);
      }
    }, {
      key: "updateState",
      value: function updateState() {
        if (this.state.Component !== Component) {
          this.setState({
            Component: Component
          });
        }
      }
    }, {
      key: "render",
      value: function render() {
        var StateComponent = this.state.Component;

        if (StateComponent) {
          return _react.default.createElement(StateComponent, this.props);
        }

        return null;
      }
    }]);

    _inherits(AsyncRouteComponent, _React$Component);

    return AsyncRouteComponent;
  }(_react.default.Component);

  return AsyncRouteComponent;
}