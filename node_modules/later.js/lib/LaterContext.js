"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createLaterProvider = createLaterProvider;
exports.default = exports.serverContext = void 0;

var _react = _interopRequireWildcard(require("react"));

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } _setPrototypeOf(subClass.prototype, superClass && superClass.prototype); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.getPrototypeOf || function _getPrototypeOf(o) { return o.__proto__; }; return _getPrototypeOf(o); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

/**
 *  Simple server-context that does not require state management.
 */
var serverContext = {
  isLoadingRoute: false,
  hasHandledRoute: true
};
exports.serverContext = serverContext;
var LaterContext = (0, _react.createContext)(null);
/**
 * Creates a LaterContext provider that manages if/when/how routes are updated.
 *
 * @param  {Array}     routes       react-router-config route configuration.
 * @param  {Function}  resolveRoute Function that resolves a route's loadData
 *                                  property.
 * @return {Component}              React Later-context provider component.
 */

function createLaterProvider(routes, resolveRoute) {
  var LaterContextProvider =
  /*#__PURE__*/
  function (_Component) {
    function LaterContextProvider(props) {
      var _this;

      _classCallCheck(this, LaterContextProvider);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(LaterContextProvider).call(this, props));
      _this.state = {
        hasHandledRoute: false,
        isLoadingRoute: false
      };
      _this.setHasHandledRoute = _this.setHasHandledRoute.bind(_assertThisInitialized(_assertThisInitialized(_this)));
      _this.setIsLoadingRoute = _this.setIsLoadingRoute.bind(_assertThisInitialized(_assertThisInitialized(_this)));
      return _this;
    }

    _createClass(LaterContextProvider, [{
      key: "setHasHandledRoute",
      value: function setHasHandledRoute(hasHandledRoute, done) {
        this.setState({
          hasHandledRoute: hasHandledRoute
        }, done);
      }
    }, {
      key: "setIsLoadingRoute",
      value: function setIsLoadingRoute(isLoadingRoute) {
        this.setState({
          isLoadingRoute: isLoadingRoute
        });
      }
    }, {
      key: "render",
      value: function render() {
        var children = this.props.children;
        var _this$state = this.state,
            hasHandledRoute = _this$state.hasHandledRoute,
            isLoadingRoute = _this$state.isLoadingRoute;
        var context = {
          routes: routes,
          resolveRoute: resolveRoute,
          hasHandledRoute: hasHandledRoute,
          setHasHandledRoute: this.setHasHandledRoute,
          isLoadingRoute: isLoadingRoute,
          setIsLoadingRoute: this.setIsLoadingRoute
        };
        return _react.default.createElement(LaterContext.Provider, {
          value: context
        }, children);
      }
    }]);

    _inherits(LaterContextProvider, _Component);

    return LaterContextProvider;
  }(_react.Component);

  return LaterContextProvider;
}

var _default = LaterContext;
exports.default = _default;