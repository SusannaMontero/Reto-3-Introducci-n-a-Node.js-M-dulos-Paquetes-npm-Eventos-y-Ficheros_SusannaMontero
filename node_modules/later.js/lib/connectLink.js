"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.connectRouteData = connectRouteData;
exports.connectLink = connectLink;

var _react = _interopRequireWildcard(require("react"));

var _reactRouterDom = require("react-router-dom");

var _loadRouteData = _interopRequireDefault(require("./loadRouteData"));

var _loadRouteComponents = _interopRequireDefault(require("./loadRouteComponents"));

var _LaterContext = _interopRequireDefault(require("./LaterContext"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } _setPrototypeOf(subClass.prototype, superClass && superClass.prototype); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.getPrototypeOf || function _getPrototypeOf(o) { return o.__proto__; }; return _getPrototypeOf(o); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

/**
 * Connects a component to the LaterContext context.
 *
 * @param  {Component} WrappedComponent React component to provide context to.
 * @return {Component}                  Wrapped React component.
 */
function connectRouteData(WrappedComponent) {
  return function (props) {
    return _react.default.createElement(_LaterContext.default.Consumer, null, function (context) {
      return _react.default.createElement(WrappedComponent, _extends({}, context, props));
    });
  };
}
/**
 * Allows for components to be used as links with internal status updates.
 *
 * @param  {Component} WrappedComponent React component to wrap.
 * @param  {String}    eventHandler     Event handler name that should push to
 *                                      history state.
 * @param  {Function}  onError          Function to call on an error.
 * @return {Component}                  Wrapped React component.
 */


function connectLink(WrappedComponent, eventHandler, onError) {
  var ConnectLink =
  /*#__PURE__*/
  function (_Component) {
    function ConnectLink(props) {
      var _this;

      _classCallCheck(this, ConnectLink);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(ConnectLink).call(this, props));
      _this.state = {
        routeError: null
      };
      _this.load = _this.load.bind(_assertThisInitialized(_assertThisInitialized(_this)));
      return _this;
    }
    /**
     * Loads and possibly switches to the specified route.
     *
     * @param  {Event} e Triggering event.
     */


    _createClass(ConnectLink, [{
      key: "load",
      value: function load(e) {
        var _this2 = this;

        e.preventDefault(); // weird to spread so many out.

        var p = this.props;
        Promise.resolve(p[eventHandler] ? p[eventHandler]() : null).then(function (shouldRoute) {
          // Check if it should route or not depending on the resolved
          // status.
          if (shouldRoute !== false) {
            Promise.all(_toConsumableArray((0, _loadRouteData.default)(p.routes, p.to, p.resolveRoute)).concat([(0, _loadRouteComponents.default)(p.routes, p.to)])).then(function () {
              // Wait before pushing state so it doesn't accidentally fall
              // as an unmanaged route change.
              p.setHasHandledRoute(true, function () {
                p.history.push(p.to);
              });
            });
          }
        }).catch(function (error) {
          if (onError) {
            onError(error);
          }

          _this2.setState({
            routeError: error
          });
        });
      }
    }, {
      key: "render",
      value: function render() {
        var _passedProps;

        var passedProps = (_passedProps = {}, _defineProperty(_passedProps, eventHandler, this.load), _defineProperty(_passedProps, "routeError", this.state.routeError), _passedProps);
        return _react.default.createElement(WrappedComponent, _extends({}, this.props, passedProps));
      }
    }]);

    _inherits(ConnectLink, _Component);

    return ConnectLink;
  }(_react.Component);

  return (0, _reactRouterDom.withRouter)(connectRouteData(ConnectLink));
}

;