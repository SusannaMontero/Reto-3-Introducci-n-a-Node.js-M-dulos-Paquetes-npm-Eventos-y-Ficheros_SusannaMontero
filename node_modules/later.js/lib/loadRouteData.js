"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = loadRouteData;

var _reactRouterConfig = require("react-router-config");

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/**
 * Collects all loadRoute properties (and transforms them through localResolve)
 * from the route collection for a given path.
 *
 * @param  {Array}    routes       react-router-config route configuration.
 * @param  {String}   location     Future pathname.
 * @param  {Function} localResolve resolveRoute bound to a given store.
 * @param  {Object}   ctx          Additional context passed from render or
 *                                 hydrate (e.g. the request).
 * @return {Promise}               Promise that loads all required data for a
 *                                 route.
 */
function loadRouteData(routes, location, localResolve, ctx) {
  var branch = (0, _reactRouterConfig.matchRoutes)(routes, location);
  return branch.map(function (_ref) {
    var match = _ref.match,
        route = _ref.route;

    if (route.loadData) {
      return localResolve(route.loadData, _objectSpread({}, ctx, {
        match: match
      }));
    }

    return undefined;
  });
}