"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _reactRouter = require("react-router");

var _loadRouteComponents = _interopRequireDefault(require("./loadRouteComponents"));

var _loadRouteData = _interopRequireDefault(require("./loadRouteData"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } _setPrototypeOf(subClass.prototype, superClass && superClass.prototype); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.getPrototypeOf || function _getPrototypeOf(o) { return o.__proto__; }; return _getPrototypeOf(o); }

/**
 * Handles unmanaged route changes in the React application. Fetching data and
 * components where necessary.
 */
var HandleRouteChange =
/*#__PURE__*/
function (_Component) {
  function HandleRouteChange() {
    var _getPrototypeOf2;

    var _temp, _this;

    _classCallCheck(this, HandleRouteChange);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _possibleConstructorReturn(_this, (_temp = _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(HandleRouteChange)).call.apply(_getPrototypeOf2, [this].concat(args))), _this.state = {
      previousLocation: null
    }, _temp));
  }

  _createClass(HandleRouteChange, [{
    key: "componentWillReceiveProps",
    value: function componentWillReceiveProps(nextProps) {
      var _this2 = this;

      if (this.props.location !== nextProps.location) {
        // Using nextProps and not this.props here in case of some batched state
        // change?
        if (!nextProps.hasHandledRoute) {
          nextProps.setIsLoadingRoute(true);
          this.setState({
            previousLocation: this.props.location
          });
          Promise.all(_toConsumableArray((0, _loadRouteData.default)(nextProps.routes, nextProps.location, nextProps.resolveRoute)).concat([(0, _loadRouteComponents.default)(nextProps.routes, nextProps.location)])).then(function () {
            nextProps.setIsLoadingRoute(false);
            nextProps.setHasHandledRoute(false);

            _this2.setState({
              previousLocation: null
            });
          }).catch(function (e) {
            nextProps.setIsLoadingRoute(false, e);
          });
        } else {
          // Reset that the route change was handled
          nextProps.setHasHandledRoute(false);
        }
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props = this.props,
          children = _this$props.children,
          location = _this$props.location;
      var previousLocation = this.state.previousLocation;
      return _react.default.createElement(_reactRouter.Route, {
        location: previousLocation || location,
        render: function render() {
          return children;
        }
      });
    }
  }]);

  _inherits(HandleRouteChange, _Component);

  return HandleRouteChange;
}(_react.Component);

var _default = (0, _reactRouter.withRouter)(HandleRouteChange);

exports.default = _default;