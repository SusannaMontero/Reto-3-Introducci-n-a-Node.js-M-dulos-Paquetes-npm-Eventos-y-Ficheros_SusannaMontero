"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.render = render;

var _react = _interopRequireDefault(require("react"));

var _reactHelmet = _interopRequireDefault(require("react-helmet"));

var _reactRedux = require("react-redux");

var _server = require("react-dom/server");

var _reactRouterDom = require("react-router-dom");

var _reactRouterConfig = require("react-router-config");

var _LaterContext = _interopRequireWildcard(require("./LaterContext"));

var _loadRouteData = _interopRequireDefault(require("./loadRouteData"));

var _loadRouteComponents = _interopRequireDefault(require("./loadRouteComponents"));

var _Document = _interopRequireDefault(require("./Document"));

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

/**
 * Renders or redirects a request on the server.
 *
 * @param {Object}    options               Render options.
 * @param {Object}    options.req           Server request.
 * @param {Object}    options.res           Server response (or an express-like
 *                                          response object).
 * @param {Array}     options.routes        react-router-config route configuration.
 * @param {Object}    options.assets        Assets manifest.
 * @param {Component} options.document      Alternative document.
 * @param {Function}  options.createStore   Function that creates a redux store.
 * @param {Function}  options.resolveRoute  Function that resolves a routes
 *                                          loadData property.
 * @param {Function}  options.appendToHead  Function that returns a React
 *                                          component that will be placed at
 *                                          the end of the document head.
 * @param {Function}  options.renderMethod  Method used to render to a string, 
 *                                          add wrapped components here as 
 *                                          the children are provided.
 */
function render(_ref) {
  var req = _ref.req,
      res = _ref.res,
      routes = _ref.routes,
      assets = _ref.assets,
      document = _ref.document,
      createStore = _ref.createStore,
      resolveRoute = _ref.resolveRoute,
      appendToHead = _ref.appendToHead,
      renderMethod = _ref.renderMethod;
  var context = {};
  var Document = document || _Document.default;
  var store = createStore({});
  var localResolve = resolveRoute.bind(this, store);
  return Promise.all(_toConsumableArray((0, _loadRouteData.default)(routes, req.url, localResolve, {
    req: req
  })).concat([(0, _loadRouteComponents.default)(routes, req.url)])).then(function () {
    renderMethod = renderMethod || _server.renderToString;
    var content = renderMethod(_react.default.createElement(_LaterContext.default.Provider, {
      value: _LaterContext.serverContext
    }, _react.default.createElement(_reactRedux.Provider, {
      store: store
    }, _react.default.createElement(_reactRouterDom.StaticRouter, {
      location: req.url,
      context: context
    }, (0, _reactRouterConfig.renderRoutes)(routes)))));

    if (context.url) {
      res.redirect(301, context.url);
    } else {
      var helmet = _reactHelmet.default.renderStatic();

      var page = (0, _server.renderToString)(_react.default.createElement(Document, {
        helmet: helmet,
        data: store.getState(),
        assets: assets,
        content: content,
        appendToHead: appendToHead
      }));
      return '<!doctype html>' + page;
    }
  });
}

;